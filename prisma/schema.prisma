generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  description String?
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Product")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         String?
  academic     Academic[]
  activities   Activity[]
  scholarships Scholarship[]
  students     Student[]

  @@map("User")
}

model Student {
  id                String       @id @default(uuid())
  nrp               BigInt       @unique
  name              String
  major             String
  year              Int
  semester          Int
  status            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  userId            String?
  username          String?
  ipk               Decimal      @default(0.0)
  image             String?
  receivedAwardId   String?
  receivedAwardName String?
  receivedAward     Scholarship? @relation(fields: [receivedAwardId], references: [id])
  user              User?        @relation(fields: [userId], references: [id])

  @@map("Student")
}

model Activity {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  date        String
  username    String?
  link        String?
  image       String?
  user        User?    @relation(fields: [userId], references: [id])

  @@map("Activity")
}

model Scholarship {
  id          String    @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String?
  date        String
  username    String?
  link        String?
  image       String?
  user        User?     @relation(fields: [userId], references: [id])
  awardedTo   Student[]

  @@map("Scholarship")
}

model Academic {
  id          String   @id @default(uuid())
  title       String
  date        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  username    String?
  link        String?
  user        User?    @relation(fields: [userId], references: [id])

  @@map("Academic")
}
